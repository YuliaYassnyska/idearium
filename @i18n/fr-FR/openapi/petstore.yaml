openapi: 3.0.2
servers:
  - url: /v3
info:
  description: >-
    Ceci est un serveur d'exemple de magasin d'animaux basé sur la spécification OpenAPI 3.0.
    Vous pouvez en savoir plus sur

    Swagger sur [http://swagger.io](http://swagger.io). Dans la troisième itération
    du magasin d'animaux, nous avons opté pour une approche de conception d'abord !

    Vous pouvez maintenant nous aider à améliorer l'API, que ce soit en apportant des modifications
    à la définition elle-même ou au code.

    De cette façon, avec le temps, nous pourrons améliorer l'API en général et exposer certaines
    des nouvelles fonctionnalités dans OAS3.


    Quelques liens utiles :

    - [Le dépôt du magasin d'animaux](https://github.com/swagger-api/swagger-petstore)

    - [La définition de l'API source pour le magasin d'animaux](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  version: 1.0.20-SNAPSHOT
  title: Magasin d'animaux Swagger - OpenAPI 3.0
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: pet
    description: Tout sur vos animaux de compagnie
    externalDocs:
      description: En savoir plus
      url: http://swagger.io
  - name: store
    description: Accès aux commandes du magasin d'animaux
    externalDocs:
      description: En savoir plus sur notre magasin
      url: http://swagger.io
  - name: user
    description: Opérations concernant l'utilisateur
paths:
  /pet:
    post:
      tags:
        - pet
      summary: Ajouter un nouvel animal au magasin
      description: Ajouter un nouvel animal au magasin
      operationId: addPet
      responses:
        '200':
          description: Opération réussie
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Entrée invalide
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      requestBody:
        description: Créer un nouvel animal dans le magasin
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
    put:
      tags:
        - pet
      summary: Mettre à jour un animal existant
      description: Mettre à jour un animal existant par Id
      operationId: updatePet
      responses:
        '200':
          description: Opération réussie
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: ID invalide fourni
        '404':
          description: Animal non trouvé
        '405':
          description: Exception de validation
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      requestBody:
        description: Mettre à jour un animal existant dans le magasin
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Trouver des animaux par statut
      description: Plusieurs valeurs de statut peuvent être fournies sous forme de chaînes séparées par des virgules
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Valeurs de statut à prendre en compte pour le filtrage
          required: false
          explode: true
          schema:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
      responses:
        '200':
          description: Opération réussie
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Valeur de statut invalide
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Trouver des animaux par tags
      description: >-
        Plusieurs tags peuvent être fournis sous forme de chaînes séparées par des virgules. Utilisez tag1,
        tag2, tag3 pour les tests.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags pour filtrer
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Opération réussie
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Valeur de tag invalide
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Trouver un animal par ID
      description: Retourne un seul animal
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID de l'animal à retourner
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Opération réussie
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: ID invalide fourni
        '404':
          description: Animal non trouvé
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Mettre à jour un animal dans le magasin avec des données de formulaire
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID de l'animal à mettre à jour
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Nom de l'animal à mettre à jour
          schema:
            type: string
        - name: status
          in: query
          description: Statut de l'animal à mettre à jour
          schema:
            type: string
      responses:
        '405':
          description: Entrée invalide
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Supprimer un animal
      description: ''
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: ID de l'animal à supprimer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Valeur de l'animal invalide
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: Télécharge une image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID de l'animal à mettre à jour
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Métadonnées supplémentaires
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Opération réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Retourne les inventaires des animaux par statut
      description: Retourne une carte des codes de statut aux quantités
      operationId: getInventory
      x-swagger-router-controller: OrderController
      responses:
        '200':
          description: Opération réussie
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Passer une commande pour un animal
      description: Passer une nouvelle commande dans le magasin
      operationId: placeOrder
      x-swagger-router-controller: OrderController
      responses:
        '200':
          description: Opération réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Entrée invalide
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Trouver une commande d'achat par ID
      x-swagger-router-controller: OrderController
      description: >-
        Pour une réponse valide, essayez des IDs entiers avec une valeur <= 5 ou > 10. Les autres valeurs généreront des exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID de la commande à récupérer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Opération réussie
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: ID invalide fourni
        '404':
          description: Commande non trouvée
    delete:
      tags:
        - store
      summary: Supprimer une commande d'achat par ID
      x-swagger-router-controller: OrderController
      description: >-
        Pour une réponse valide, essayez des IDs entiers avec une valeur < 1000. Tout ce qui est au-dessus de 1000 ou des non-entiers générera des erreurs d'API.
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID de la commande à supprimer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: ID invalide fourni
        '404':
          description: Commande non trouvée
  /user:
    post:
      tags:
        - user
      summary: Créer un utilisateur
      description: Cela ne peut être fait que par l'utilisateur connecté.
      operationId: createUser
      responses:
        default:
          description: Opération réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Objet utilisateur créé
  /user/createWithList:
    post:
      tags:
        - user
      summary: Crée une liste d'utilisateurs avec le tableau d'entrée donné
      description: Crée une liste d'utilisateurs avec le tableau d'entrée donné
      x-swagger-router-controller: UserController
      operationId: createUsersWithListInput
      responses:
        '200':
          description: Opération réussie
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Opération réussie
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Connecte l'utilisateur au système
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: Nom d'utilisateur pour la connexion
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: Mot de passe pour la connexion en texte clair
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Opération réussie
          headers:
            X-Rate-Limit:
              description: appels par heure autorisés par l'utilisateur
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date en UTC quand le jeton expire
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Nom d'utilisateur/mot de passe invalide fourni
  /user/logout:
    get:
      tags:
        - user
      summary: Déconnecte la session de l'utilisateur actuel
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: Opération réussie
  /user/{username}:
    get:
      tags:
        - user
      summary: Obtenir un utilisateur par nom d'utilisateur
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: Nom d'utilisateur pour récupérer
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Opération réussie
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Nom d'utilisateur invalide fourni
        '404':
          description: Utilisateur non trouvé
    put:
      tags:
        - user
      summary: Mettre à jour un utilisateur
      description: Cela ne peut être fait que par l'utilisateur connecté.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: Nom d'utilisateur à mettre à jour
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Opération réussie
        '400':
          description: Nom d'utilisateur invalide fourni
        '404':
          description: Utilisateur non trouvé
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Mise à jour de l'utilisateur existant
    delete:
      tags:
        - user
      summary: Supprimer un utilisateur
      description: Cela ne peut être fait que par l'utilisateur connecté.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: Nom d'utilisateur à supprimer
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Nom d'utilisateur invalide fourni
        '404':
          description: Utilisateur non trouvé
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Statut de la commande
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: Statut de l'animal dans le magasin
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: Statut de l'utilisateur dans le système
          format: int32
      xml:
        name: User
securitySchemes:
  api_key:
    type: apiKey
    name: api_key
    in: header
  petstore_auth:
    type: oauth2
    flows:
      implicit:
        authorizationUrl: https://petstore.swagger.io/oauth/authorize
        scopes:
          write:pets: modifier des animaux de compagnie dans votre compte
          read:pets: lire vos animaux de compagnie
externalDocs:
  description: Trouvez plus d'informations ici
  url: http://swagger.io

